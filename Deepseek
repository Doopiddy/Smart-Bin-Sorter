#include <WiFi.h>
#include <ESP32Servo.h>
#include <WebServer.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// WiFi credentials
const char* ssid = "PLDTHOMEFIBRJAWS5";
const char* password = "RVN*7Ven+s_2001";

// Pin definitions
#define SERVO1_PIN        33
#define SERVO2_PIN        4
#define GAS_SENSOR1_PIN   32
#define GAS_SENSOR2_PIN   23
#define ULTRASONIC1_ECHO  12
#define ULTRASONIC1_TRIG  13
#define ULTRASONIC2_ECHO  19
#define ULTRASONIC2_TRIG  18

// LCD Configuration (I2C)
#define LCD_ADDR    0x27
#define LCD_COLS    16
#define LCD_ROWS    2

// Servo positions
#define SERVO_CENTER      90
#define SERVO_LEFT1       45
#define SERVO_RIGHT1      135
#define SERVO_LEFT2       135
#define SERVO_RIGHT2      45

// Gas sensor constants
#define VCC               3.3
#define RL                10.0
#define CALIBRATION_SAMPLES 50

Servo servo1;
Servo servo2;
WebServer server(80);
LiquidCrystal_I2C lcd(LCD_ADDR, LCD_COLS, LCD_ROWS);

// Corrected global variables
float rsAirCalibrated1 = 0.0;  // For MQ-135 sensor 1
float rsAirCalibrated2 = 0.0;  // For MQ-135 sensor 2
float currentAirQuality1 = 0.0; // Rs/R0 ratio for sensor 1
float currentAirQuality2 = 0.0; // Rs/R0 ratio for sensor 2
long currentDistance1 = 0;      // Distance in cm for ultrasonic sensor 1
long currentDistance2 = 0;      // Distance in cm for ultrasonic sensor 2

String localIP;

void setup() {
  Serial.begin(115200);

  // Initialize sensors and actuators
  pinMode(GAS_SENSOR1_PIN, INPUT);
  pinMode(GAS_SENSOR2_PIN, INPUT);
  pinMode(ULTRASONIC1_TRIG, OUTPUT);
  pinMode(ULTRASONIC1_ECHO, INPUT);
  pinMode(ULTRASONIC2_TRIG, OUTPUT);
  pinMode(ULTRASONIC2_ECHO, INPUT);

  // Attach servos
  servo1.attach(SERVO1_PIN);
  servo2.attach(SERVO2_PIN);
  centerServos();

  // Initialize LCD
  lcd.init();
  lcd.backlight();
  
  // Calibrate gas sensors
  Serial.println("Calibrating MQ-135 sensors...");
  delay(10000);  // Warm-up time for sensors
  rsAirCalibrated1 = calibrateMQ135(GAS_SENSOR1_PIN);
  rsAirCalibrated2 = calibrateMQ135(GAS_SENSOR2_PIN);
  Serial.println("Calibrated Rs (Sensor 1): " + String(rsAirCalibrated1));
  Serial.println("Calibrated Rs (Sensor 2): " + String(rsAirCalibrated2));

  // Connect to WiFi
  connectToWiFi();

  // Initialize web server
  setupWebServer();

  Serial.println("System Ready!");
  updateLCD();
}

void loop() {
  server.handleClient();
  updateSensors();
  delay(100);
}

void connectToWiFi() {
  WiFi.begin(ssid, password);
  
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Connecting WiFi");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
    lcd.setCursor(0, 1);
    lcd.print("Status: Trying...");
  }

  localIP = WiFi.localIP().toString();
  Serial.println("WiFi connected!");
  Serial.print("Device IP: ");
  Serial.println(localIP);
}

void setupWebServer() {
  server.on("/", handleRoot);
  server.on("/left", handleLeft);
  server.on("/right", handleRight);
  server.on("/center", handleCenter);
  server.on("/air-quality", handleAirQuality);
  server.on("/distance", handleDistance);
  server.on("/status", handleStatus);
  
  server.begin();
}

void updateLCD() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("IP:");
  lcd.print(localIP);
  lcd.setCursor(0, 1);
  lcd.print("AQ1:" + String(currentAirQuality1, 2));
}

void updateSensors() {
  // Corrected variable names
  currentAirQuality1 = readMQ135(GAS_SENSOR1_PIN, rsAirCalibrated1);
  currentAirQuality2 = readMQ135(GAS_SENSOR2_PIN, rsAirCalibrated2);
  currentDistance1 = getDistance(ULTRASONIC1_TRIG, ULTRASONIC1_ECHO);
  currentDistance2 = getDistance(ULTRASONIC2_TRIG, ULTRASONIC2_ECHO);
}

// Servo control functions
void centerServos() {
  servo1.write(SERVO_CENTER);
  servo2.write(SERVO_CENTER);
}

void moveLeft() {
  servo1.write(SERVO_LEFT1);
  servo2.write(SERVO_LEFT2);
}

void moveRight() {
  servo1.write(SERVO_RIGHT1);
  servo2.write(SERVO_RIGHT2);
}

// Web server handlers
void handleRoot() {
  String html = "<html><body>";
  html += "<h1>Waste Sorting System</h1>";
  html += "<p>IP: " + localIP + "</p>";
  html += "<p><a href='/left'>Move Left</a></p>";
  html += "<p><a href='/right'>Move Right</a></p>";
  html += "<p><a href='/center'>Center</a></p>";
  html += "<p><a href='/air-quality'>Air Quality</a></p>";
  html += "<p><a href='/distance'>Distance</a></p>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}

void handleLeft() {
  moveLeft();
  server.send(200, "text/plain", "Moved left");
  updateLCD();
}

void handleRight() {
  moveRight();
  server.send(200, "text/plain", "Moved right");
  updateLCD();
}

void handleCenter() {
  centerServos();
  server.send(200, "text/plain", "Centered");
  updateLCD();
}

void handleAirQuality() {
  String response = "{\"sensor1\":" + String(currentAirQuality1) + ",\"sensor2\":" + String(currentAirQuality2) + "}";
  server.send(200, "application/json", response);
}

void handleDistance() {
  String response = "{\"sensor1\":" + String(currentDistance1) + ",\"sensor2\":" + String(currentDistance2) + "}";
  server.send(200, "application/json", response);
}

void handleStatus() {
  String status = "{\"ip\":\"" + localIP + "\",\"status\":\"running\"}";
  server.send(200, "application/json", status);
}

// Corrected sensor functions
float readMQ135(int pin, float rsAirCalibratedValue) {
  int analogValue = analogRead(pin);
  float voltage = analogValue * (VCC / 4095.0);
  float rs = RL * (VCC - voltage) / voltage;
  return rs / rsAirCalibratedValue;
}

float calibrateMQ135(int pin) {
  float rsSum = 0;
  for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
    int analogValue = analogRead(pin);
    float voltage = analogValue * (VCC / 4095.0);
    rsSum += RL * (VCC - voltage) / voltage;
    delay(100);
  }
  return rsSum / CALIBRATION_SAMPLES;
}

long getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH);
  return duration * 0.034 / 2;
}
